graph_from_adjacency_matrix(dat)
graph_from_adjacency_matrix(as.matrix(dat))
graph_from_adjacency_matrix(as.matrix(dat)) %>% get.edgelist()
graph_from_adjacency_matrix(as.matrix(dat)) %>% get.edgelist() -> hehe
head(hehe)
View(hehe)
hehe[V1 == '161']
hehe[V1 == '161',]
graph_from_adjacency_matrix(as.matrix(dat)) -> hehe
?get.edge.ids
get.edge.ids(hehe, c(161, 142))
get.edges(hehe, c(161, 142))
?E
?gsize
?ecount
edge_connectivity(hehe, 161, 142)
?edge.connectivity
edge_connectivity(hehe, 161, 2)
edge_connectivity(hehe, 161, 161)
edge_connectivity(hehe, 161, 79)
vertex.connectivity(hehe, 161, 164)
vertex.connectivity(hehe, 161, 142)
vertex.connectivity(hehe, 142, 132)
subgraph(hehe, c(161, 142, 138, 164, 79))
hehe
vertex_attr_names(hehe)
names(hehe)
get.vertex.attribute(hehe)
?permute.vertices
permute.vertices(hehe, as.integer(get.vertex.attribute(hehe))) -> hehe2
permute.vertices(hehe, as.numeric(get.vertex.attribute(hehe))) -> hehe2
permute.vertices(hehe, as.numeric(unlist(get.vertex.attribute(hehe)))) -> hehe2
hehe2
get.vertex.attribute(hehe2)
ubgraph(hehe2, c(161, 142, 138, 164, 79))
subgraph(hehe2, c(161, 142, 138, 164, 79))
?combinations
combs <- gtools::combinations(265, num_nodes)
View(combs)
?mcsapply
?mclapply
library(parallel)
?mcsapply
?mclapply
?mapply
?mclapply
?lapply
?mclapply
?gsize
source('~/Dropbox/Homeworks/HW13/config.R')
source('~/Dropbox/Homeworks/HW13/prob2.R')
dat <- read.csv(
'processed_data/2019-01.csv',
header = TRUE,
row.names = 1,
stringsAsFactors = FALSE,
check.names = FALSE
) %>%
as.matrix %>%
graph_from_adjacency_matrix
connectivity <- mcmapply(
1:nrow(combs), # Number of combinations
function(x) {
# Create subgraph from big graph
subdat <- subgraph(dat, combs[x])
# combs[x] = combination being considered = vertices of new graph
# Return number of edges of subgraph (ie number of connections)
return(gsize(subdat))
},
#mc.cores = 6,
SIMPLIFY = TRUE
)
?mapply
connectivity <- mcmapply(
function(x) {
# Create subgraph from big graph
subdat <- subgraph(dat, combs[x])
# combs[x] = combination being considered = vertices of new graph
# Return number of edges of subgraph (ie number of connections)
return(gsize(subdat))
},
1:nrow(combs), # Number of combinations
#mc.cores = 6,
SIMPLIFY = TRUE
)
connectivity <- mapply(
function(x) {
# Create subgraph from big graph
subdat <- subgraph(dat, combs[x])
# combs[x] = combination being considered = vertices of new graph
# Return number of edges of subgraph (ie number of connections)
return(gsize(subdat))
},
1:nrow(combs), # Number of combinations
#mc.cores = 6,
SIMPLIFY = TRUE
)
?sapply
connectivity <- sapply(
1:nrows(combs),
function(x) {
# Create subgraph from big graph
subdat <- subgraph(dat, combs[x])
# combs[x] = combination being considered = vertices of new graph
# Return number of edges of subgraph (ie number of connections)
return(gsize(subdat))
},
#mc.cores = 6,
SIMPLIFY = TRUE
)
connectivity <- sapply(
1:nrow(combs),
function(x) {
# Create subgraph from big graph
subdat <- subgraph(dat, combs[x])
# combs[x] = combination being considered = vertices of new graph
# Return number of edges of subgraph (ie number of connections)
return(gsize(subdat))
},
#mc.cores = 6,
SIMPLIFY = TRUE
)
connectivity <- sapply(
1:nrow(combs),
function(x) {
# Create subgraph from big graph
subdat <- subgraph(dat, combs[x])
# combs[x] = combination being considered = vertices of new graph
# Return number of edges of subgraph (ie number of connections)
return(gsize(subdat))
}#,
#mc.cores = 6,
#SIMPLIFY = TRUE
)
combs <- combinations(265, 2)
connectivity <- sapply(
1:nrow(combs),
function(x) {
# Create subgraph from big graph
subdat <- subgraph(dat, combs[x])
# combs[x] = combination being considered = vertices of new graph
# Return number of edges of subgraph (ie number of connections)
return(gsize(subdat))
}#,
#mc.cores = 6,
#SIMPLIFY = TRUE
)
max(connectivity)
gsize(subgraph(dat,c(161,142)))
subgraph(dat,c(161,142))
subgraph(hehe2,c(161,142))
dat <- permute.vertices(
hehe,
as.numeric(unlist(get.vertex.attribute(dat)))
)
connectivity <- sapply(
1:nrow(combs),
function(x) {
# Create subgraph from big graph
subdat <- subgraph(dat, combs[x])
# combs[x] = combination being considered = vertices of new graph
# Return number of edges of subgraph (ie number of connections)
return(gsize(subdat))
}#,
#mc.cores = 6,
#SIMPLIFY = TRUE
)
max(connectivity)
max(c(12,43,445432))
combs[34324]
combs[343]
View(combs)
combs[343,]
connectivity <- sapply(
1:nrow(combs),
function(x) {
# Create subgraph from big graph
subdat <- subgraph(dat, combs[x,])
# combs[x,] = combination being considered = vertices of new graph
# Return number of edges of subgraph (ie number of connections)
return(gsize(subdat))
}#,
#mc.cores = 6,
#SIMPLIFY = TRUE
)
max(connectivity)
which.max(connectivity)
combs[3501,]
source('config.R')
system('aws s3 ls s3://hw13-prob1-results > dynamic/processed_files.txt')
system('aws s3 ls s3://hw13-prob1-results > dynamic/processed_files.txt')
read.csv('dynamic/processed_files.txt') -> hehe
View(hehe)
fromJSON('dynamic/processed_files.txt') -> hehe
library(jsonlite)
fromJSON('dynamic/processed_files.txt') -> hehe
readChar('dynamic/processed_files.txt') -> hehe
?readChar
readLines('dynamic/processed_files.txt') -> hehe
debugSource('~/Dropbox/Homeworks/HW13/prob1.R')
source('~/Dropbox/Homeworks/HW13/prob1.R')
source('~/Dropbox/Homeworks/HW13/prob1.R')
source('~/Dropbox/Homeworks/HW13/prob1.R')
processed_files() -> processed
create_folders()
processed_files() -> processed
processed
str_sub(processed, 10, 12)
str_sub(processed, 15, 20)
str_sub(processed, 30, 35)
str_sub(processed, 33, 37)
str_sub(processed, 32, 37)
str_sub(processed, 32, 38)
source('~/Dropbox/Homeworks/HW13/config.R')
str_sub('2019-01', 1, 4)
str_sub('2019-01', 5, 6)
str_sub('2019-01', 6, 7)
processed
find_most_connected('01', '2019', 3)
debugSource('~/Dropbox/Homeworks/HW13/prob2.R')
find_most_connected('01', '2019', 3)
debugSource('~/Dropbox/Homeworks/HW13/prob2.R')
debugSource('~/Dropbox/Homeworks/HW13/prob2.R')
source('~/Dropbox/Homeworks/HW13/prob2.R')
find_most_connected('01', '2019', 3)
source('~/Dropbox/Homeworks/HW13/config.R')
find_most_connected('01', '2019', 2)
future::plan(multicore, workers = 6)
future::plan(multicore, workers = 6)
months <- c('2019-01', '2019-04', '2020-12')
months <- c('2019-01', '2019-04', '2020-02')
out <- furrr::future_imap_dfr(
months,
function(month) {
mon <- str_sub(month, 6, 7)
yr <- str_sub(month, 1, 4)
most_connected <- find_most_connected(mon, yr, 3)
out <- data.frame(
month = month,
r1 = most_connected[1],
r2 = most_connected[2],
r3 = most_connected[3],
stringsAsFactors = FALSE
)
return(out)
}
)
out <- furrr::future_map2_dfr(
months,
function(month) {
mon <- str_sub(month, 6, 7)
yr <- str_sub(month, 1, 4)
most_connected <- find_most_connected(mon, yr, 3)
out <- data.frame(
month = month,
r1 = most_connected[1],
r2 = most_connected[2],
r3 = most_connected[3],
stringsAsFactors = FALSE
)
return(out)
}
)
out <- furrr::future_map2_dfr(
months,
function(x) {
mon <- str_sub(x, 6, 7)
yr <- str_sub(x, 1, 4)
most_connected <- find_most_connected(mon, yr, 3)
out <- data.frame(
time = x,
r1 = most_connected[1],
r2 = most_connected[2],
r3 = most_connected[3],
stringsAsFactors = FALSE
)
return(out)
}
)
months <- vector('2019-01', '2019-04', '2020-02')
months <- processed %>%
str_sub(32, 38) # Vector example: "2019-01" "2019-02" "2019-03"
months
months[1,3]
months[1]
months[1:3]
out <- furrr::future_map2_dfr(
months[1:3],
function(x) {
mon <- str_sub(x, 6, 7)
yr <- str_sub(x, 1, 4)
most_connected <- find_most_connected(mon, yr, 3)
out <- data.frame(
time = x,
r1 = most_connected[1],
r2 = most_connected[2],
r3 = most_connected[3],
stringsAsFactors = FALSE
)
return(out)
}
)
source('~/Dropbox/Homeworks/HW13/prob3.R')
out <- furrr::future_map2_dfr(
months[1:3],
function(x) {
browser()
mon <- str_sub(x, 6, 7)
yr <- str_sub(x, 1, 4)
most_connected <- find_most_connected(mon, yr, 3)
out <- data.frame(
time = x,
r1 = most_connected[1],
r2 = most_connected[2],
r3 = most_connected[3],
stringsAsFactors = FALSE
)
return(out)
}
)
str_sub(months[1], 6, 7)
find_most_connected(mon, yr, 3) -> a
find_most_connected('09', '2019', 3) -> a
find_most_connected('09', '2019', 2) -> a
a[1]
a[2]
find_most_connected('09', '2019', 2)[1]
out <- furrr::future_map2_dfr(
months[1:3],
function(x) {
browser()
mon <- str_sub(x, 6, 7)
yr <- str_sub(x, 1, 4)
most_connected <- find_most_connected(mon, yr, 2)
out <- data.frame(
time = x,
r1 = most_connected[1],
r2 = most_connected[2],
stringsAsFactors = FALSE
)
return(out)
}
)
furrr::future_map2_dfr(
months[1:3],
function(x) {
browser()
mon <- str_sub(x, 6, 7)
yr <- str_sub(x, 1, 4)
most_connected <- find_most_connected(mon, yr, 2)
out <- data.frame(
time = x,
r1 = most_connected[1],
r2 = most_connected[2],
stringsAsFactors = FALSE
)
return(out)
}
)
furrr::future_map2_dfr(
months[1:3],
function(x) {
browser()
mon <- str_sub(x, 6, 7)
yr <- str_sub(x, 1, 4)
most_connected <- find_most_connected(mon, yr, 2)
out <- data.frame(
time = x,
stringsAsFactors = FALSE
)
return(out)
}
)
furrr::future_map2_dfr(
months[1:3],
function(x) {
browser()
most_connected <- find_most_connected(mon, yr, 2)
out <- data.frame(
time = x,
stringsAsFactors = FALSE
)
return(out)
}
)
furrr::future_map_dfr(
months[1:3],
function(x) {
browser()
mon <- str_sub(x, 6, 7)
yr <- str_sub(x, 1, 4)
most_connected <- find_most_connected(mon, yr, 2)
out <- data.frame(
time = x,
r1 = most_connected[1],
r2 = most_connected[2],
stringsAsFactors = FALSE
)
return(out)
}
)
source('~/Dropbox/Homeworks/HW13/prob3.R')
furrr::future_map_dfr(
months[1:3],
function(x) {
mon <- str_sub(x, 6, 7)
yr <- str_sub(x, 1, 4)
most_connected <- find_most_connected(mon, yr, 2)
out <- data.frame(
time = x,
r1 = most_connected[1],
r2 = most_connected[2],
stringsAsFactors = FALSE
)
return(out)
}
)
source('~/Dropbox/Homeworks/HW13/prob3.R')
source('~/Dropbox/Homeworks/HW13/prob3.R')
source('~/Dropbox/Homeworks/HW13/config.R')
system('aws s3 cp s3://hw13-prob1-results/2019-02.csv processed_data/.')
mat201902 <- read.csv(
'dynamics/matx.csv',
header = TRUE,
row.names = 1,
stringsAsFactors = FALSE,
check.names = FALSE
)
system('aws s3 cp s3://hw13-prob1-results/2019-02.csv processed_data/.')
mat201902 <- read.csv(
'processed_data/2019-02.csv',
header = TRUE,
row.names = 1,
stringsAsFactors = FALSE,
check.names = FALSE
)
head(mat201902)
source('~/Dropbox/Homeworks/HW13/prob2.R')
?mclapply
source('~/Dropbox/Homeworks/HW13/prob2.R')
find_most_connected('02', '2019', 2)
source('~/Dropbox/Homeworks/HW13/prob2.R')
source('config.R')
find_most_connected('02', '2019', 2)
find_most_connected('02', '2019', 3)
source('~/Dropbox/Homeworks/HW13/prob2.R')
get.vertex.attribute(dat)
?permute.vertices
?read_graph
?write_graph
?read_graph
?write_graph
?read_graph
View(mat201902)
mat201902 <- mat201902[order(row.names(mat201902)),]
mat201902 <- mat201902[order(as.numeric(row.names(mat201902))),]
mat201902 <- mat201902[,order(as.numeric(col.names(mat201902)))]
mat201902 <- mat201902[,order(as.numeric(names(mat201902)))]
source('~/Dropbox/Homeworks/HW13/prob1.R')
?write.csv
source('~/Dropbox/Homeworks/HW13/prob2.R')
out_matrix <- mat201902
out_matrix <- out_matrix[, order( as.numeric( names(out_matrix) ) )]
out_matrix <- out_matrix[ order( as.numeric( row.names(out_matrix) ) ), ]
View(out_matrix)
source('~/Dropbox/Homeworks/HW13/prob1.R')
out_path <- 'sample.csv'
write.csv(
out_matrix,
out_path,
row.names = FALSE
)
dat3 <- fread('sample.csv')
View(dat3)
write.csv(
out_matrix,
out_path,
row.names = FALSE,
col.names = FALSE
)
fwrite(
out_matrix,
out_path
)
dat3 <- fread(out_path)
View(dat3)
dat3 <- fread(out_path, header = TRUE)
source('~/Dropbox/Homeworks/HW13/prob1.R')
?str_detect
source('~/Dropbox/Homeworks/HW13/prob1.R')
source('~/Dropbox/Homeworks/HW13/prob1.R')
source('~/Dropbox/Homeworks/HW13/prob2.R')
source('~/Dropbox/Homeworks/HW13/prob1.R')
source('~/Dropbox/Homeworks/HW13/prob2.R')
source('~/Dropbox/Homeworks/HW13/config.R')
source('~/Dropbox/Homeworks/HW13/prob2.R')
combs <- gtools::combinations(265, 2)
combs[1,]
subgraph(dat, c(1,2))
subgraph(dat, combs[1,]
)
subgraph(dat, combs[35423,]
)
subgraph(dat, combs[3542,])
subgraph(dat, combs[759,])
debugSource('~/Dropbox/Homeworks/HW13/prob2.R')
source('~/Dropbox/Homeworks/HW13/prob2.R')
sessionInfo()
?gorder
debugSource('~/Dropbox/Homeworks/HW13/prob2.R')
source('~/Dropbox/Homeworks/HW13/prob2.R')
select(mat201902, 1:3)
